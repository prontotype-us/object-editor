// Generated by CoffeeScript 1.10.0
var ContentEditable, EditableField, NewRow, ObjectEditor, React, asString, nonNullKeys, parseValue;

React = require('react');

ContentEditable = require('react-contenteditable');

nonNullKeys = function(o) {
  var k, ks, v;
  ks = [];
  for (k in o) {
    v = o[k];
    if (v != null) {
      ks.push(k);
    }
  }
  return ks;
};

parseValue = function(s) {
  if (s.match(/^\d+$/)) {
    return Number(s);
  } else if (s === 'true' || s === 'false') {
    return s === 'true';
  } else if (s === '{}') {
    return {};
  } else if (s === '[]') {
    return [];
  } else {
    return s;
  }
};

EditableField = React.createClass({displayName: "EditableField",
  getInitialState: function() {
    return {
      value: this.props.value,
      edited: false
    };
  },
  componentWillReceiveProps: function(new_props) {
    var new_value;
    if (new_value = new_props.value) {
      return this.setState({
        value: new_value
      });
    }
  },
  empty: function() {
    var ref;
    return !((ref = this.state.value) != null ? ref.length : void 0);
  },
  onChange: function(e) {
    var edited, value;
    value = e.target.value;
    if (!this.props.no_type) {
      value = parseValue(value);
    }
    edited = value !== this.props.value;
    return this.setState({
      value: value,
      edited: edited
    });
  },
  onKeyDown: function(e) {
    var base, base1;
    if (e.keyCode === 13) {
      e.preventDefault();
      this.save();
    } else if (e.keyCode === 8) {
      if (this.state.value.length === 0) {
        e.preventDefault();
        if (typeof (base = this.props).onCancel === "function") {
          base.onCancel();
        }
      }
    }
    return typeof (base1 = this.props).onKeyDown === "function" ? base1.onKeyDown(e) : void 0;
  },
  save: function() {
    console.log('[EditableField save]', this.state);
    if (this.state.edited) {
      this.props.onSave(this.state.value);
      this.setState({
        edited: false
      });
      if (this.props.clearOnSave) {
        return this.setState({
          value: ''
        });
      }
    }
  },
  onFocus: function() {
    var el, range, sel;
    el = this.refs.input.htmlEl;
    if (el.innerHTML.length) {
      range = document.createRange();
      sel = window.getSelection();
      range.setStart(el, 1);
      range.collapse(true);
      sel.removeAllRanges();
      return sel.addRange(range);
    }
  },
  focus: function() {
    var el;
    el = this.refs.input.htmlEl;
    return el.focus();
  },
  render: function() {
    var className;
    className = (this.props.className || '') + ' editable-field' + (this.state.edited ? ' edited' : '');
    if (!this.props.no_type) {
      className += ' type-' + typeof this.state.value;
    }
    if (this.props.value == null) {
      className += ' new';
    }
    return React.createElement("div", {
      "className": className
    }, React.createElement(ContentEditable, {
      "ref": 'input',
      "html": asString(this.state.value),
      "onChange": this.onChange,
      "disabled": this.props.disabled,
      "onKeyDown": this.onKeyDown,
      "placeholder": this.props.placeholder,
      "onBlur": this.save,
      "onFocus": this.onFocus
    }), (this.empty() ? React.createElement("span", {
      "className": 'placeholder'
    }, this.props.placeholder) : void 0));
  }
});

asString = function(value) {
  if (typeof value === 'object') {
    return JSON.stringify(value);
  } else {
    return value;
  }
};

NewRow = React.createClass({
  displayName: 'NewRow',
  getInitialState: function() {
    return {
      key: this.props.static_key != null ? this.props.static_key : '',
      value: '',
      errors: {}
    };
  },
  componentDidMount: function() {
    if (this.props.static_key != null) {
      return this.refs.value.focus();
    } else {
      return this.refs.key.focus();
    }
  },
  onChange: function(key) {
    return (function(_this) {
      return function(e) {
        var change, ref, value;
        value = ((ref = e.target) != null ? ref.value : void 0) || e;
        change = {};
        change[key] = value;
        return _this.setState(change);
      };
    })(this);
  },
  errors: function() {
    return {
      key: !this.state.key.length && (this.props.static_key == null) ? true : void 0
    };
  },
  trySave: function() {
    var errors;
    console.log('[NewRow trySave]');
    if (nonNullKeys(errors = this.errors()).length > 0) {
      return this.setState({
        errors: errors
      });
    } else {
      return this.save();
    }
  },
  save: function() {
    var key, ref, row, value;
    console.log('[NewRow save]');
    ref = this.state, key = ref.key, value = ref.value;
    row = {};
    row[key] = value;
    this.props.onSave(row);
    this.setState(this.getInitialState());
    return this.refs.key.focus();
  },
  saveKey: function(key) {
    return this.setState({
      key: key
    }, (function(_this) {
      return function() {
        if (_this.state.key.length > 0) {
          return _this.refs.value.focus();
        }
      };
    })(this));
  },
  saveValue: function(value) {
    return this.setState({
      value: value
    }, (function(_this) {
      return function() {
        return _this.trySave();
      };
    })(this));
  },
  focusKey: function() {
    console.log('select?');
    if (this.props.static_key != null) {
      return this.onCancel();
    } else {
      return this.refs.key.focus();
    }
  },
  render: function() {
    return React.createElement("div", {
      "className": 'new-row'
    }, React.createElement(EditableField, {
      "ref": 'key',
      "className": 'key ' + (this.state.errors.key ? ' invalid' : ''),
      "value": this.state.key,
      "onSave": this.saveKey,
      "onCancel": this.props.onCancel,
      "disabled": (this.props.static_key != null),
      "no_type": true
    }), React.createElement(EditableField, {
      "ref": 'value',
      "className": 'value ' + (this.state.errors.value ? ' invalid' : ''),
      "value": asString(this.state.value),
      "onSave": this.saveValue,
      "onCancel": this.focusKey
    }));
  }
});

ObjectEditor = React.createClass({
  displayName: 'ObjectEditor',
  getInitialState: function() {
    return {
      object: this.props.object,
      adding: false
    };
  },
  componentWillReceiveProps: function(new_props) {
    var new_object;
    if (new_object = new_props.object) {
      return this.setState({
        object: new_object,
        adding: false
      });
    }
  },
  saveRow: function(key) {
    return (function(_this) {
      return function(value) {
        var object;
        object = _this.state.object;
        object[key] = value;
        _this.setState({
          object: object
        });
        return _this.props.onSave(object);
      };
    })(this);
  },
  saveEntire: function(object) {
    this.setState({
      object: object
    });
    return this.props.onSave(object);
  },
  updateKey: function(old_key) {
    return (function(_this) {
      return function(new_key) {
        var object, value;
        object = _this.state.object;
        value = object[old_key];
        delete object[old_key];
        object[new_key] = value;
        _this.setState({
          object: object
        });
        return _this.props.onSave(object);
      };
    })(this);
  },
  addRow: function(row) {
    var object;
    console.log("[addRow] " + (JSON.stringify(row)));
    object = this.state.object;
    Object.assign(object, row);
    this.setState({
      object: object,
      adding: false
    }, this.focusAdder);
    return this.props.onSave(object);
  },
  addValue: function(row) {
    var object, value;
    value = row[Object.keys(row)[0]];
    console.log("[addValue] " + (JSON.stringify(value)));
    object = this.state.object;
    object.push(value);
    this.setState({
      object: object,
      adding: false
    }, this.focusAdder);
    return this.props.onSave(object);
  },
  deleteRow: function(key) {
    return (function(_this) {
      return function() {
        var object;
        console.log("[deleteRow] " + (JSON.stringify(key)));
        object = _this.state.object;
        if (Array.isArray(object)) {
          object.splice(key, 1);
        } else {
          delete object[key];
        }
        _this.setState({
          object: object
        });
        return _this.props.onSave(object);
      };
    })(this);
  },
  focusAdder: function() {
    return this.refs.adder.focus();
  },
  showAddRow: function() {
    return this.setState({
      adding: true
    });
  },
  hideAddRow: function() {
    return this.setState({
      adding: false
    }, this.focusAdder);
  },
  render: function() {
    var editor_class_name, key, type;
    editor_class_name = (this.props.className || '') + ' object-editor ';
    if (Array.isArray(this.state.object)) {
      editor_class_name += 'edit-array';
    } else if (typeof this.state.object === 'object') {
      editor_class_name += 'edit-object';
      if (type = this.state.object.type) {
        editor_class_name += ' -type-' + type;
      }
    } else {
      editor_class_name += 'edit-value';
    }
    if (key = this.props.key_name) {
      editor_class_name += ' value-' + key;
    }
    if (typeof this.state.object === 'object') {
      return React.createElement("div", {
        "className": editor_class_name
      }, Object.keys(this.state.object).map((function(_this) {
        return function(key) {
          var extra_class_name, key_class_name, row_class_name, value;
          value = _this.state.object[key];
          row_class_name = 'row row-' + key;
          key_class_name = 'key';
          key_class_name += ' key-' + key;
          return React.createElement("div", {
            "className": row_class_name,
            "key": key
          }, React.createElement("span", {
            "className": key_class_name
          }, React.createElement(EditableField, {
            "onSave": _this.updateKey(key),
            "className": 'key',
            "value": key,
            "disabled": Array.isArray(_this.state.object),
            "no_type": true
          }), (typeof value === 'object' ? (Array.isArray(value) ? extra_class_name = 'extra-array' : extra_class_name = 'extra-object', React.createElement("span", {
            "className": extra_class_name
          }, (Array.isArray(value) ? "[" + value.length + "]" : "{" + Object.keys(value).length + "}"))) : void 0)), React.createElement(ObjectEditor, {
            "object": value,
            "onSave": _this.saveRow(key),
            "key_name": key
          }), React.createElement("div", {
            "className": 'actions'
          }, React.createElement("a", {
            "onClick": _this.deleteRow(key),
            "className": 'delete button'
          }, React.createElement("i", {
            "className": 'fa fa-close'
          }))));
        };
      })(this)), (typeof this.state.object === 'object' ? this.state.adding ? Array.isArray(this.state.object) ? React.createElement(NewRow, {
        "onSave": this.addValue,
        "static_key": this.state.object.length,
        "onCancel": this.hideAddRow
      }) : React.createElement(NewRow, {
        "onSave": this.addRow,
        "onCancel": this.hideAddRow
      }) : React.createElement("button", {
        "ref": 'adder',
        "className": 'adder',
        "onClick": this.showAddRow
      }, "+") : void 0));
    } else {
      return React.createElement("div", {
        "className": editor_class_name
      }, React.createElement(EditableField, {
        "className": 'value',
        "value": this.state.object,
        "onSave": this.saveEntire
      }));
    }
  }
});

module.exports = ObjectEditor;
